{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"usu-optt-forms","text":"<p>A collection of online web forms to faciliate easy record keeping on USU OPTT students.</p>"},{"location":"#requirements","title":"Requirements","text":"<p>This project is built using Node via <code>npm</code>.</p> <pre><code>git clone https://github.com/jarenglenn/usu-optt-forms.git\ncd usu-optt-forms\nnpm install\n</code></pre>"},{"location":"#development","title":"Development","text":"<p>To start up a development server, run</p> <pre><code>npm run dev\n</code></pre> <p>Then open <code>http://localhost:8080/</code> to view your changes.</p> <p>Should you make any changes to the data structure stored in LocalStorage, you must write a migration in order to prevent a crash when existing users open the new version.</p>"},{"location":"#deployment","title":"Deployment","text":"<p>To deploy the project, first install the dependencies in <code>requirements.txt</code> using <code>pip</code>. This can be done either globally or in a virtual environment.</p> <p>After the dependencies are installed, run <code>deploy.py</code>.</p> <pre><code>python deploy.py\n</code></pre> <p>Note: You must have access to USU's servers when deploying this application. This means you need to be on campus or have an open VPN connection to the network.</p>"},{"location":"#documentation","title":"Documentation","text":"<p>More detailed documentation can be found on the documentation site at https://jarenglenn.github.io/usu-optt-forms.</p>"},{"location":"notes/","title":"General Notes","text":""},{"location":"notes/#currentform","title":"CurrentForm","text":"<p>The current form can be changed in <code>app/webpack/currentForm.ts</code>.</p>"},{"location":"notes/#formdata","title":"FormData","text":"<p>FormData provides a general structure for all the different forms. When adding a new entry to <code>FormOptions</code> a key/value pair must be provided here with the new data.</p>"},{"location":"notes/#folder-structure","title":"Folder Structure","text":"<ul> <li>Components</li> <li>Stores reusable components that are used throughout the app</li> <li>Defaults</li> <li>Stores the more complex initial states</li> <li>Hooks</li> <li>Holds custom hooks</li> <li>Pages</li> <li>The larger components that are used as pages</li> <li>Routing</li> <li>Routing components</li> <li>Slices</li> <li>Stores redux Slices and logic</li> <li>Types</li> <li><code>dataTypes</code> stores the types for the data pages.</li> <li><code>types</code> stores everything else (mostly).</li> <li>Utils</li> <li><code>dataUtils</code> provides utils for data pages.</li> <li><code>notebookCheckUtils</code> provides utils for the notebook check page.</li> <li><code>pdfUtils</code> provides utils for the pdf generation process.</li> <li><code>timerUtils</code> provides utils relating to the timers.</li> <li><code>utils</code> is a general utils file.</li> </ul>"},{"location":"notes/#extra-form","title":"Extra Form","text":"<p>It's important to know that there is one form that does not have a button in <code>index.html</code> that links to it, the <code>teacherCandidate</code> form.</p>"},{"location":"rubrics/","title":"Rubrics","text":"<p>The <code>.json</code> files stored in <code>rubrics</code> serve as a way to store large amounts of data without entering it into React itself.</p>"},{"location":"rubrics/#rubrics","title":"Rubrics","text":"<p>Rubrics are imported in <code>FormData</code> and used to provide rubric data to each of the forms. This is used, mostly, by the <code>pages/data/Rubric</code> component. It loops over the rubric provided and generates the rubric scoring page.</p>"},{"location":"rubrics/#notes","title":"Notes","text":"<ul> <li>Options may have scores or not; however, if any option in a row has a score, all other options in the row must as well.</li> </ul>"},{"location":"rubrics/#other-json-data","title":"Other JSON Data","text":"<p>There are a couple <code>json</code> files stored here that are not rubrics, however:</p> <ul> <li><code>practicumChecklist</code> is imported in <code>pages/PracticumChecklist</code> and <code>components/pdfDataChecklist</code> to generate the checklist page and the report for the checklist page, respectively.</li> <li><code>notebookChecks.json</code> is imported in <code>notebookCheckUtils</code> to provide a util function used to get the content of a notebook check in <code>defaults</code> and <code>notebookChecksSlice</code>.</li> </ul>"},{"location":"stateManagement/","title":"State Management","text":""},{"location":"stateManagement/#slices","title":"Slices","text":"<p>A \"slice\" is the terminology used by Redux Toolkit to control state. It provides the actions and defaults for each of your states and as such redux logic is stored stored in <code>app/webpack/slices</code>.</p>"},{"location":"stateManagement/#reading-and-updating-state","title":"Reading and Updating State","text":"<p>Use the provided <code>useAppSelector</code> and <code>useAppDispatch</code> to read and update state respectively.</p>"},{"location":"stateManagement/#initial-state","title":"Initial State","text":"<p>Slices also allow granular control of the initial state of the application, as also seen in the rubric slice. The app generates the rubric initial state via <code>getInitialState</code> which loops over the rubric and creates an object representing it.</p> <p>This allows for the rubric's initial state to be whichever form is selected instead a more complex structure.</p>"},{"location":"stateManagement/#store","title":"Store","text":"<p>Note that redux-persist is used in<code>store.ts</code> to ensure data is saved between sessions. This also allows each form to have its own storage via the <code>key: currentForm</code> config parameter so multiple forms can be opened at once without overwriting each other.</p> <p>This is why the reducers are combined into a single <code>persistedReducer</code>.</p>"},{"location":"stateManagement/#migrations","title":"Migrations","text":"<p>Migrations are written in <code>app/webpack/migrations.ts</code>. These must be written manually as the data structure in LocalStorage changes in order to prevent a crash when existing users launch the app.</p> <p>To write a migration, simple provide a new value to <code>migrations</code> as <code>[newVersion]: migrationFunction</code>. The <code>migrationFunction</code> is a mapping from the old state structure to the new state structure, providing default values if needed. As an example:</p> <pre><code>[1]: (state: MigratingState): MigratingState =&gt; {\nreturn {\n...state,\nnotebookChecks: getNotebookCheck(Location.logan, \"1\"),\nformInfo: {\n...state.formInfo,\nlocation: Location.logan,\nobservation: \"1\",\n},\n};\n</code></pre> <p>See existing migrations for more examples.</p> <p>Once the migration is written, bump the <code>persistVersion</code> in <code>app/webpack.store.ts</code> to <code>newVersion</code>.</p>"},{"location":"tools/","title":"Tools","text":"<p>This page serves as a guide to the tools and packages used to create the forms. Documentation for each of these will not be provided as their individual documentation will be much more thorough and helpful than anything written here.</p>"},{"location":"tools/#language","title":"Language","text":"<p>TypeScript was chosen to build this project with over JavaScript since it solves SO many type issues. It's not too different than JavaScript, but it requires more thinking.</p>"},{"location":"tools/#framework","title":"Framework","text":"<p>React is used as the major framework for this application.</p>"},{"location":"tools/#datepicker","title":"Datepicker","text":"<p>React Datepicker provides the date selection component.</p>"},{"location":"tools/#state-management","title":"State Management","text":"<p>Redux Toolkit is used for almost all state management for this project.</p>"},{"location":"tools/#styling","title":"Styling","text":"<p>Styled Components is used in most cases to style the application. Some regular <code>css</code> files are imported to <code>index.html</code> but these are mostly externally provided. For instance for <code>react-datepicker</code> to work properly they need to import one; Google Fonts and Font Awesome both require importing one as well to work offline.</p>"},{"location":"tools/#icons","title":"Icons","text":"<p>Font Awesome is used for the few icons this project uses.</p>"},{"location":"tools/#routing","title":"Routing","text":"<p>React Router is used for routing between \"pages\". We use React Router's HashRouter which, while not being as advanced as the default <code>BrowserRouter</code>, makes it possible to use the forms as static files. This is needed for the offline version of the forms.</p>"},{"location":"tools/#pdf-generation","title":"PDF Generation","text":"<p>jsPDF allows for easy generation and saving of the PDFs and jsPDF-AutoTable makes table generation extremely simple.</p> <p>One thing to note about these two packages: while they do work with TypeScript (especially <code>jsPDF-AutoTable</code>) sometimes it can be a little weird to get it working properly. Read the docs thoroughly if you need to make any large changes.</p>"}]}